#!/bin/bash

####################################################
####       ROS bash functions to navigate      #####
####################################################

# Finds workspaces and cd into it
function prows() {
    cd $(find ${HOME} -maxdepth 6 -path '**/src/*' -name 'CMakeLists.txt' -type l 2>/dev/null | awk -F"/src" '{print $1}' | fzf) && test -f devel/setup.bash && source devel/setup.bash
}

# Build and sources the workspace
function basows() {
    catkin build -w $(catkin locate) && source $(catkin locate -d)/setup.bash
}

# sources the workspace
function sows() {
    source "$(catkin locate -d)/setup.bash"
}

# Sets master uri for ros
function set_master_uri() {
    local ROS_BASH="${HOME}/.ros.bash"
    sed -i --follow-symlinks "s/^export ROS_MASTER_URI=.*/export ROS_MASTER_URI=http:\/\/${1:-localhost}:11311/" "${ROS_BASH}"
    local ip
    ip=$(hostname -I | cut -d ' ' -f 1)
    if [[ -n "${1}" ]]; then
        sed -i --follow-symlinks "s/^#export ROS_IP=.*/export ROS_IP=${ip}/" "${ROS_BASH}"
        sed -i --follow-symlinks "s/^export ROS_IP=.*/export ROS_IP=${ip}/" "${ROS_BASH}"
    else
        sed -i --follow-symlinks "s/^export ROS_IP=.*/#export ROS_IP=/" "${ROS_BASH}"
    fi
}

#############################################################
####     Helper function to user associative array      #####
#############################################################

#Function to store in pid_array
function store_pid_array() {
    pid_array["$1"]="$2"
    return $?
}

#Functioon to fetch from pid_array
function fetch_pid_array() {
    if [[ -z "${pid_array[$1]}" ]]; then
        return $E_DB
    fi

    echo -n "${pid_array[$1]}"
    return $?
}

#Function to store in pid_array_to_kill
function store_pid_array_to_kill() {
    pid_array_to_kill["$1"]="$2"
    return $?
}

#Functioon to fetch from pid_array_to_kill
function fetch_pid_array_to_kill() {
    if [[ -z "${pid_array_to_kill[$1]}" ]]; then
        return $E_DB
    fi

    echo -n "${pid_array_to_kill[$1]}"
    return $?
}

#Function to store value pairs in process_name_array
function store_process_name_array() {
    process_name_array["$1"]="$2"
    return $?
}

#Function to fetch from process_name_array
function fetch_process_name_array() {
    if [[ -z "${process_name_array["$1"]}" ]]; then
        return $E_DB
    fi

    echo -n "${process_name_array["$1"]}"
    return $?
}

#####################################################
####        Functions taken from ros repo        ####
#####################################################
# These function are taken from below link and modified
# https://github.com/ros/ros/blob/noetic-devel/tools/rosbash/rosbash
function rosclised {
    if [[ $(uname) == Darwin || $(uname) == FreeBSD ]]; then
        sed -E "$@"
    else
        sed -r "$@"
    fi
}

function rosclifind {
    if [[ $(uname) == Darwin || $(uname) == FreeBSD ]]; then
        # BSD find needs -E for extended regexp
        find -E "$@"
    else
        find "$@"
    fi
}

function roscli_package_find {
    # finds package directory of $1
    local loc
    loc=$(export ROS_CACHE_TIMEOUT=-1.0 && rospack find "$1" 2>/dev/null)
    if [[ $? != 0 ]]; then
        return 1
    fi
    echo $loc
    return 0
}

function rosclicomplete_find {
    # find files that match $2 within $1
    local opts pkgdir catkin_package_libexec_dir
    local perm=${1}
    local pkg=${2}
    if [[ -n $CMAKE_PREFIX_PATH ]]; then
        catkin_package_libexec_dir=$(catkin_find --first-only --without-underlays --libexec ${pkg} 2>/dev/null)
    fi
    pkgdir=$(roscli_package_find ${pkg})
    if [[ -n "$catkin_package_libexec_dir" || -n "$pkgdir" ]]; then
        opts=$(rosclifind -L $catkin_package_libexec_dir "$pkgdir" ${1} ! -regex ".*/[.][^./].*" ! -regex ".*$pkgdir\/build\/.*" -print0 | tr '\000' '\n' | sed -e "s/.*\/\(.*\)/\1/g")
    else
        opts=""
    fi
    echo $opts | tr ' ' '\n'
    return 0
}

function roscli_list_packages {
    local packages
    packages=$(export ROS_CACHE_TIMEOUT=-1.0 && rospack list-names)
    echo $packages | tr ' ' '\n'
    return 0
}

#####################################################
####     Helper function for menu functions      ####
#####################################################

# Run the command in all the free pts in generated layout of terminals
function runinall() {
    for pts in ${available_pts[@]}; do
        sudo ttyecho -n /dev/pts/${pts} $@
    done
}

# Sends message to rostui
function message() {
    case $1 in
    "-a")
        shift
        echo -n $(echo "$@" | cat - "${CONFIG_DIR}/message") >"${CONFIG_DIR}/message"
        ;;
    "-w")
        shift
        echo -n "{$@}" >"${CONFIG_DIR}/message"
        ;;
    *)
        echo -n "$@" >"${CONFIG_DIR}/message"
        ;;
    esac

}

# Function to print pid - tty - name of current processes
function printpidttyname() {

    local process_name pts
    echo "{roslaunch process}"
    for process_name in $(printf '%s\n' ${!process_name_array[*]} | grep -s ".*\.launch$"); do
        pts=$(fetch_process_name_array $process_name)
        echo "${pid_array[$pts]} - $pts - $process_name"
    done

    echo
    echo "{rosrun process}"
    for process_name in $(printf '%s\n' ${!process_name_array[*]} | grep -sv ".*\.launch$"); do
        pts=$(fetch_process_name_array $process_name)
        echo "${pid_array[$pts]} - $pts - $process_name"
    done
}

# Check if all the process running or not
function pid_check() {
    local pid cur_pts process_name pts_num
    for pid in ${pid_array[@]}; do
        if ps -p $pid >/dev/null; then
            continue
        fi
        # Getting pts of the ended process
        for cur_pts in "${!pid_array[@]}"; do
            if [[ "${pid_array[$cur_pts]}" = "${pid}" ]]; then
                break
            fi
        done

        message "Process '$pid' stopped running!"

        # Getting process name of the stopped process
        for process_name in ${!process_name_array[*]}; do
            pts_num=$(fetch_process_name_array $process_name)
            if [[ "${pts_num}" == "${cur_pts}" ]]; then

                # Unsetting the stopped process info
                eval "unset \"process_name_array[$process_name]\""
                eval "unset \"pid_array[${cur_pts}]\""
                sudo ttyecho -n /dev/pts/${cur_pts} "reset"

                # Updating available pts
                available_pts+=(${cur_pts})
                available_pts_size=${#available_pts[@]}
                printpidttyname >"${CONFIG_DIR}/pidttyname"
            fi
        done
    done
    echo -n "${available_pts[@]}" >"${CONFIG_DIR}/freepts"
}

# Creates require directory
# Gets available pts
# Change directory to workspace
function program_init() {
    local j pts old_pts
    sleep 1
    mkdir -p "${HOME}/.config/roscli"
    CONFIG_DIR="${HOME}/.config/roscli"

    # Taking the list of open pts
    old_pts=($(ls /dev/pts))
    terminator -l roscli
    available_pts=($(ls /dev/pts))
    available_pts_size=${#available_pts[@]}

    # Removing the old_pts list from available_pts list
    for pts in ${old_pts[@]}; do
        for ((j = 0; j < available_pts_size; j++)); do
            if [[ "${available_pts[j]}" == "$pts" ]]; then
                unset "available_pts[j]"
                break
            fi
        done
    done
    available_pts=("${available_pts[@]}")
    available_pts_size=${#available_pts[@]}

    # Sourcing all
    runinall "source" "${HOME}/.ros.bash"

    # going into workspace
    cd || roscli_exit 1
    prows

    # Safety check whether workspace exist in current directory
    if ! catkin locate >/dev/null 2>&1; then
        echo "ERROR: No workspace found containing '$(pwd)' "
        roscli_exit 1
    fi

    workspace_dir="$(pwd)"
    echo -n "$workspace_dir" >"${CONFIG_DIR}/workspace"
    echo -n "${available_pts[@]}" >"${CONFIG_DIR}/freepts"
    catkin list -u >"${CONFIG_DIR}/package"
    clear
}

################################################
####         Functions used in menu        #####
################################################

# Builds all the packages in the workspace
function buildall() {
    # Build and source the workspace
    if basows >/dev/null 2>&1; then
        message "Let's go! Build success"
        echo -n '0' >"${CONFIG_DIR}/buildstatus"
    else
        message -w 'Oops! Build failed'
        echo -n '1' >"${CONFIG_DIR}/buildstatus"
    fi
}

# Builds a single package in the workspace
function buildapkg() {
    local package_name
    # Selecting the package
    package_name="$(catkin list -u | fzf)"
    if [[ -z "${package_name}" ]]; then
        message -w "No package selected"
        return
    fi

    # Building the selected package
    catkin build $package_name 1>/dev/null 2>/dev/null && sows
    if [[ "$?" == "0" ]]; then
        message "Let's go! Build success"
        echo -n '0' >"${CONFIG_DIR}/buildstatus"
    else
        message -w 'Oops! Build failed'
        echo -n '1' >"${CONFIG_DIR}/buildstatus"
    fi
}

# Source the workspaces in all terminal
function sourcethews() {
    # Source the workspace
    runinall cd "$workspace_dir"
    sows && runinall sows && runinall clear
    message "Sourced the workspace in all terminals :)"
}

# Function to start a process i.e roslaunch or rosrun
function startaprocess {

    local perm pkg file_name pts_num command_to_run separator
    if [[ $(uname) == Darwin || $(uname) == FreeBSD ]]; then
        perm="+111"
    else
        perm="/111"
    fi

    # Safety check
    available_pts_size=${#available_pts[@]}
    if ((available_pts_size < 1)); then
        message -w "Oops! All terminal occupied!"
        return
    fi
    message ""

    pts_num="${available_pts[0]}"
    pkg="$(roscli_list_packages | fzf)"

    if [[ -n "${pkg}" ]]; then

        case "$1" in
        "--launch")
            shift
            file_name=$(rosclicomplete_find "( -type f -regex .*\.launch$ -o -type f -regex .*\.test$ )" "${pkg}" | fzf)
            command_to_run="roslaunch"
            separator=" "
            ;;
        "--rosrun")
            shift
            file_name=$(rosclicomplete_find "-type f -perm $perm" "${pkg}" | fzf)
            if ! pgrep roscore >/dev/null 2>&1; then
                sudo ttyecho -n /dev/pts/${pts_num} "roscore" "&"
            fi
            command_to_run="rosrun"
            separator="/"
            ;;
        esac
    fi

    if [[ -z "${pkg}" || -z "${file_name}" ]]; then
        return 0
    fi

    # Running the selected launch file in available tty
    sudo ttyecho -n /dev/pts/${pts_num} cd "$workspace_dir"
    sleep 0.1
    sudo ttyecho -n /dev/pts/${pts_num} sows
    sleep 0.1
    sudo ttyecho -n /dev/pts/${pts_num} "${command_to_run}" "${pkg}" "${file_name}"
    store_process_name_array "${file_name}" "${pts_num}"

    message "Waiting 1s to make sure ${file_name} launched"
    # Waiting to make sure program launched
    sleep 1
    pid=$(pgrep --terminal pts/${pts_num} -f "${pkg}${separator}${file_name}")

    # if not launch, then continuing
    if [[ -z "${pid}" ]]; then
        message -w "Oops! ${command_to_run} failed"
        continue
    fi

    message "'${command_to_run} ${pkg} ${file_name}' is executed"

    store_pid_array "${pts_num}" "${pid}"
    unset "available_pts[0]"
    available_pts=("${available_pts[@]}")
    available_pts_size=${#available_pts[@]}
    printpidttyname >"${CONFIG_DIR}/pidttyname"
}

# Function to stop a single process of either roslaunch or rosrun
function stopaprocess() {

    local process_name
    # Safety check
    if ((${#pid_array[@]} == 0)); then
        message -w "No process is running"
        return
    fi
    # Selecting the process
    case "$1" in
    "--launch")
        process_name=$(printf '%s\n' ${!process_name_array[*]} | grep -s ".*\.launch$" | fzf)
        ;;
    "--rosrun")
        process_name=$(printf '%s\n' ${!process_name_array[*]} | grep -sv ".*\.launch$" | fzf)
        ;;
    esac

    if [[ -n "${process_name}" ]]; then
        pts_num=$(fetch_process_name_array "$process_name")
    fi

    if [[ -z "${process_name}" || -z "${pts_num}" ]]; then
        message -w "Process name or pts not found"
        return
    fi

    eval "unset \"process_name_array[$process_name]\""

    # Killing the process
    message "Killing $process_name program"
    kill -2 $(fetch_pid_array "${pts_num}")
    eval "unset \"pid_array[${pts_num}]\""
    sleep 2
    sudo ttyecho -n /dev/pts/${pts_num} "reset"
    sleep 2
    # Updating available pts
    available_pts+=(${pts_num})
    available_pts_size=${#available_pts[@]}
    printpidttyname >"${CONFIG_DIR}/pidttyname"

}

# Function to stop all roslaunch or all rosrun or all processes
function stopall() {

    declare -A local pid_array_to_kill
    local process_name pts_num command_name

    # Safety check
    if ((${#pid_array[@]} == 0)); then
        message -w "No process is running"
        return
    fi

    case $1 in
    "--launch")
        shift
        for process_name in $(printf '%s\n' ${!process_name_array[*]} | grep -s ".*\.launch$"); do
            pts=$(fetch_process_name_array $process_name)
            store_pid_array_to_kill "$pts" "${pid_array[$pts]}"
            eval "unset \"process_name_array[$process_name]\""
        done
        command_name="roslaunch"
        ;;

    "--rosrun")
        shift
        for process_name in $(printf '%s\n' ${!process_name_array[*]} | grep -sv ".*\.launch$"); do
            pts=$(fetch_process_name_array $process_name)
            store_pid_array_to_kill "$pts" "${pid_array[$pts]}"
            eval "unset \"process_name_array[$process_name]\""
        done
        command_name="rosrun"
        ;;

    *)
        for process_name in ${!process_name_array[*]}; do
            pts=$(fetch_process_name_array $process_name)
            store_pid_array_to_kill "$pts" "${pid_array[$pts]}"
        done
        unset "pid_array[@]"
        unset "process_name_array[@]"
        ;;

    esac

    # Safety check
    if ((${#pid_array_to_kill[@]} == 0)); then
        message -w "No ${command_name} process is running"
        return
    fi

    # Killing all the process
    kill -2 ${pid_array_to_kill[@]}
    message 'Waiting for processes to stop'
    sleep 5

    # Updating the available pts
    for pts_num in "${!pid_array_to_kill[*]}"; do
        available_pts+=(${pts_num})
        eval "unset \"pid_array[$pts_num]\""
    done

    runinall "reset"
    sleep 2
    available_pts_size=${#available_pts[@]}
    printpidttyname >"${CONFIG_DIR}/pidttyname"
    message 'Stopped all the process!'
}

# Function to change master uri and source it to terminal
function change_master_uri() {
    local master_uri
    read -p "Enter Master uri(if localhost press enter):" master_uri
    set_master_uri "$master_uri"
    runinall "source" "$HOME/.ros.bash"
    message "master uri change to 'http://${master_uri:-"localhost"}:11311'"
}

# Kindof destruction of program
function roscli_exit() {

    local pts_num
    # Safety check
    pid_check

    if ((${#pid_array[@]} != 0)); then
        kill -2 ${pid_array[@]}
        message "Waiting for processes to stop....."

        # Updating the available pts
        for pts_num in "${!pid_array[*]}"; do
            available_pts+=(${pts_num})
        done
        sleep 5
    fi

    echo -n "1" >"${CONFIG_DIR}/doexit"
    sleep 2.1
    runinall "exit"
    rm -f "${CONFIG_DIR}/message" "${CONFIG_DIR}/workspace" "${CONFIG_DIR}/freepts" "${CONFIG_DIR}/buildstatus" "${CONFIG_DIR}/package" "${CONFIG_DIR}/doexit" "${CONFIG_DIR}/pidttyname"

    exit ${1:-0}
}

######################################
####        Program start        #####
######################################

stty -echoctl # Hides ^C

trap 'roscli_exit' SIGINT # traps SIGINT(^C) signal

SUCCESS=0
E_DB=99 # Error code for missing entry.

#Array to store process name and respective tty
declare -A process_name_array

#Array to store tty and respective process id
declare -A pid_array

program_init

# Menu options array
operations=("Build all packages"
    "Build specific package"
    "Source the workspace"
    "Run roslaunch"
    "Stop a roslaunch"
    "Stop all roslaunch"
    "Run rosrun"
    "Stop a rosrun"
    "Stop all rosrun"
    "Stop all"
    "Change master uri"
    "Quit"
)

# Menu using select
PS3="Select the operations: "
select operation in "${operations[@]}"; do

    pid_check
    case $REPLY in
    1)
        buildall
        ;;
    2)
        buildapkg
        ;;
    3)
        sourcethews
        ;;
    4)
        startaprocess --launch
        ;;

    5)
        stopaprocess --launch
        ;;
    6)
        stopall --launch
        ;;
    7)
        startaprocess --rosrun
        ;;
    8)
        stopaprocess --rosrun
        ;;
    9)
        stopall --rosrun
        ;;
    10)
        stopall
        ;;
    11)
        change_master_uri
        ;;
    12)
        roscli_exit
        ;;
    esac
    pid_check
done
